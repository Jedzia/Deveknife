// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.2.0.31
//    <NameSpace>RecodeMule.Lib.Utils</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net20</CodeBaseTag><InitializeFields>All</InitializeFields><GenerateUnusedComplexTypes>False</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>False</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>StartWithUnderscore</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>False</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>False</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>False</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>False</sspCollection><sspComplexType>False</sspComplexType><sspSimpleType>False</sspSimpleType><sspEnumType>False</sspEnumType><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude></AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace RecodeMule.Lib.Utils
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1085.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("ffprobe", Namespace="", IsNullable=false)]
    public partial class ffprobeType
    {
        
        private List<packetType> _packets;
        
        private framesType _frames;
        
        private List<streamType> _streams;
        
        private List<programType> _programs;
        
        private List<chapterType> _chapters;
        
        private formatType _format;
        
        private errorType _error;
        
        private programVersionType _program_version;
        
        private List<libraryVersionType> _library_versions;
        
        private static XmlSerializer serializer;
        
        public ffprobeType()
        {
            this._library_versions = new List<libraryVersionType>();
            this._program_version = new programVersionType();
            this._error = new errorType();
            this._format = new formatType();
            this._chapters = new List<chapterType>();
            this._programs = new List<programType>();
            this._streams = new List<streamType>();
            this._frames = new framesType();
            this._packets = new List<packetType>();
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("packet", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public List<packetType> packets
        {
            get
            {
                return this._packets;
            }
            set
            {
                this._packets = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public framesType frames
        {
            get
            {
                return this._frames;
            }
            set
            {
                this._frames = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("stream", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public List<streamType> streams
        {
            get
            {
                return this._streams;
            }
            set
            {
                this._streams = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("program", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public List<programType> programs
        {
            get
            {
                return this._programs;
            }
            set
            {
                this._programs = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("chapter", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public List<chapterType> chapters
        {
            get
            {
                return this._chapters;
            }
            set
            {
                this._chapters = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public formatType format
        {
            get
            {
                return this._format;
            }
            set
            {
                this._format = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public errorType error
        {
            get
            {
                return this._error;
            }
            set
            {
                this._error = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public programVersionType program_version
        {
            get
            {
                return this._program_version;
            }
            set
            {
                this._program_version = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("library_version", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public List<libraryVersionType> library_versions
        {
            get
            {
                return this._library_versions;
            }
            set
            {
                this._library_versions = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ffprobeType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ffprobeType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ffprobeType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ffprobeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ffprobeType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ffprobeType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out ffprobeType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static ffprobeType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ffprobeType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static ffprobeType Deserialize(System.IO.Stream s)
        {
            return ((ffprobeType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current ffprobeType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ffprobeType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ffprobeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ffprobeType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ffprobeType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ffprobeType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ffprobeType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1085.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class packetType
    {
        
        private string _codec_type;
        
        private int _stream_index;
        
        private System.Nullable<long> _pts;
        
        private System.Nullable<float> _pts_time;
        
        private System.Nullable<long> _dts;
        
        private System.Nullable<float> _dts_time;
        
        private System.Nullable<long> _duration;
        
        private System.Nullable<float> _duration_time;
        
        private System.Nullable<long> _convergence_duration;
        
        private System.Nullable<float> _convergence_duration_time;
        
        private long _size;
        
        private System.Nullable<long> _pos;
        
        private string _flags;
        
        private string _data;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string codec_type
        {
            get
            {
                return this._codec_type;
            }
            set
            {
                this._codec_type = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int stream_index
        {
            get
            {
                return this._stream_index;
            }
            set
            {
                this._stream_index = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long pts
        {
            get
            {
                if (this._pts.HasValue)
                {
                    return this._pts.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                this._pts = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ptsSpecified
        {
            get
            {
                return this._pts.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._pts = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float pts_time
        {
            get
            {
                if (this._pts_time.HasValue)
                {
                    return this._pts_time.Value;
                }
                else
                {
                    return default(float);
                }
            }
            set
            {
                this._pts_time = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pts_timeSpecified
        {
            get
            {
                return this._pts_time.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._pts_time = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long dts
        {
            get
            {
                if (this._dts.HasValue)
                {
                    return this._dts.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                this._dts = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dtsSpecified
        {
            get
            {
                return this._dts.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._dts = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float dts_time
        {
            get
            {
                if (this._dts_time.HasValue)
                {
                    return this._dts_time.Value;
                }
                else
                {
                    return default(float);
                }
            }
            set
            {
                this._dts_time = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dts_timeSpecified
        {
            get
            {
                return this._dts_time.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._dts_time = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long duration
        {
            get
            {
                if (this._duration.HasValue)
                {
                    return this._duration.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                this._duration = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool durationSpecified
        {
            get
            {
                return this._duration.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._duration = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float duration_time
        {
            get
            {
                if (this._duration_time.HasValue)
                {
                    return this._duration_time.Value;
                }
                else
                {
                    return default(float);
                }
            }
            set
            {
                this._duration_time = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool duration_timeSpecified
        {
            get
            {
                return this._duration_time.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._duration_time = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long convergence_duration
        {
            get
            {
                if (this._convergence_duration.HasValue)
                {
                    return this._convergence_duration.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                this._convergence_duration = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool convergence_durationSpecified
        {
            get
            {
                return this._convergence_duration.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._convergence_duration = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float convergence_duration_time
        {
            get
            {
                if (this._convergence_duration_time.HasValue)
                {
                    return this._convergence_duration_time.Value;
                }
                else
                {
                    return default(float);
                }
            }
            set
            {
                this._convergence_duration_time = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool convergence_duration_timeSpecified
        {
            get
            {
                return this._convergence_duration_time.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._convergence_duration_time = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long size
        {
            get
            {
                return this._size;
            }
            set
            {
                this._size = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long pos
        {
            get
            {
                if (this._pos.HasValue)
                {
                    return this._pos.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                this._pos = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool posSpecified
        {
            get
            {
                return this._pos.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._pos = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string flags
        {
            get
            {
                return this._flags;
            }
            set
            {
                this._flags = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string data
        {
            get
            {
                return this._data;
            }
            set
            {
                this._data = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(packetType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current packetType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an packetType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output packetType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out packetType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(packetType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out packetType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static packetType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((packetType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static packetType Deserialize(System.IO.Stream s)
        {
            return ((packetType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current packetType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an packetType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output packetType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out packetType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(packetType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out packetType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static packetType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1085.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class libraryVersionType
    {
        
        private string _name;
        
        private int _major;
        
        private int _minor;
        
        private int _micro;
        
        private int _version;
        
        private string _ident;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int major
        {
            get
            {
                return this._major;
            }
            set
            {
                this._major = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int minor
        {
            get
            {
                return this._minor;
            }
            set
            {
                this._minor = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int micro
        {
            get
            {
                return this._micro;
            }
            set
            {
                this._micro = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ident
        {
            get
            {
                return this._ident;
            }
            set
            {
                this._ident = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(libraryVersionType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current libraryVersionType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an libraryVersionType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output libraryVersionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out libraryVersionType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(libraryVersionType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out libraryVersionType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static libraryVersionType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((libraryVersionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static libraryVersionType Deserialize(System.IO.Stream s)
        {
            return ((libraryVersionType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current libraryVersionType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an libraryVersionType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output libraryVersionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out libraryVersionType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(libraryVersionType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out libraryVersionType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static libraryVersionType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1085.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class programVersionType
    {
        
        private string _version;
        
        private string _copyright;
        
        private string _build_date;
        
        private string _build_time;
        
        private string _compiler_type;
        
        private string _compiler_version;
        
        private string _configuration;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string copyright
        {
            get
            {
                return this._copyright;
            }
            set
            {
                this._copyright = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string build_date
        {
            get
            {
                return this._build_date;
            }
            set
            {
                this._build_date = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string build_time
        {
            get
            {
                return this._build_time;
            }
            set
            {
                this._build_time = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string compiler_type
        {
            get
            {
                return this._compiler_type;
            }
            set
            {
                this._compiler_type = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string compiler_version
        {
            get
            {
                return this._compiler_version;
            }
            set
            {
                this._compiler_version = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string configuration
        {
            get
            {
                return this._configuration;
            }
            set
            {
                this._configuration = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(programVersionType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current programVersionType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an programVersionType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output programVersionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out programVersionType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(programVersionType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out programVersionType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static programVersionType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((programVersionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static programVersionType Deserialize(System.IO.Stream s)
        {
            return ((programVersionType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current programVersionType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an programVersionType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output programVersionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out programVersionType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(programVersionType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out programVersionType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static programVersionType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1085.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class errorType
    {
        
        private int _code;
        
        private string _string;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int code
        {
            get
            {
                return this._code;
            }
            set
            {
                this._code = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string @string
        {
            get
            {
                return this._string;
            }
            set
            {
                this._string = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(errorType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current errorType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an errorType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output errorType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out errorType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(errorType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out errorType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static errorType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((errorType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static errorType Deserialize(System.IO.Stream s)
        {
            return ((errorType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current errorType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an errorType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output errorType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out errorType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(errorType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out errorType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static errorType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1085.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class formatType
    {
        
        private List<tagType> _tag;
        
        private string _filename;
        
        private int _nb_streams;
        
        private int _nb_programs;
        
        private string _format_name;
        
        private string _format_long_name;
        
        private System.Nullable<float> _start_time;
        
        private System.Nullable<float> _duration;
        
        private System.Nullable<long> _size;
        
        private System.Nullable<long> _bit_rate;
        
        private System.Nullable<int> _probe_score;
        
        private static XmlSerializer serializer;
        
        public formatType()
        {
            this._tag = new List<tagType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("tag", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<tagType> tag
        {
            get
            {
                return this._tag;
            }
            set
            {
                this._tag = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string filename
        {
            get
            {
                return this._filename;
            }
            set
            {
                this._filename = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int nb_streams
        {
            get
            {
                return this._nb_streams;
            }
            set
            {
                this._nb_streams = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int nb_programs
        {
            get
            {
                return this._nb_programs;
            }
            set
            {
                this._nb_programs = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string format_name
        {
            get
            {
                return this._format_name;
            }
            set
            {
                this._format_name = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string format_long_name
        {
            get
            {
                return this._format_long_name;
            }
            set
            {
                this._format_long_name = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float start_time
        {
            get
            {
                if (this._start_time.HasValue)
                {
                    return this._start_time.Value;
                }
                else
                {
                    return default(float);
                }
            }
            set
            {
                this._start_time = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool start_timeSpecified
        {
            get
            {
                return this._start_time.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._start_time = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float duration
        {
            get
            {
                if (this._duration.HasValue)
                {
                    return this._duration.Value;
                }
                else
                {
                    return default(float);
                }
            }
            set
            {
                this._duration = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool durationSpecified
        {
            get
            {
                return this._duration.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._duration = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long size
        {
            get
            {
                if (this._size.HasValue)
                {
                    return this._size.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                this._size = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool sizeSpecified
        {
            get
            {
                return this._size.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._size = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long bit_rate
        {
            get
            {
                if (this._bit_rate.HasValue)
                {
                    return this._bit_rate.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                this._bit_rate = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool bit_rateSpecified
        {
            get
            {
                return this._bit_rate.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._bit_rate = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int probe_score
        {
            get
            {
                if (this._probe_score.HasValue)
                {
                    return this._probe_score.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                this._probe_score = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool probe_scoreSpecified
        {
            get
            {
                return this._probe_score.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._probe_score = null;
                }
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(formatType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current formatType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an formatType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output formatType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out formatType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(formatType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out formatType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static formatType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((formatType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static formatType Deserialize(System.IO.Stream s)
        {
            return ((formatType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current formatType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an formatType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output formatType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out formatType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(formatType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out formatType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static formatType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1085.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class tagType
    {
        
        private string _key;
        
        private string _value;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string key
        {
            get
            {
                return this._key;
            }
            set
            {
                this._key = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tagType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tagType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an tagType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tagType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tagType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tagType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out tagType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static tagType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tagType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static tagType Deserialize(System.IO.Stream s)
        {
            return ((tagType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current tagType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an tagType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tagType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tagType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tagType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out tagType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static tagType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1085.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class chapterType
    {
        
        private List<tagType> _tag;
        
        private int _id;
        
        private string _time_base;
        
        private int _start;
        
        private System.Nullable<float> _start_time;
        
        private int _end;
        
        private float _end_time;
        
        private static XmlSerializer serializer;
        
        public chapterType()
        {
            this._tag = new List<tagType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("tag", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<tagType> tag
        {
            get
            {
                return this._tag;
            }
            set
            {
                this._tag = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string time_base
        {
            get
            {
                return this._time_base;
            }
            set
            {
                this._time_base = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int start
        {
            get
            {
                return this._start;
            }
            set
            {
                this._start = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float start_time
        {
            get
            {
                if (this._start_time.HasValue)
                {
                    return this._start_time.Value;
                }
                else
                {
                    return default(float);
                }
            }
            set
            {
                this._start_time = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool start_timeSpecified
        {
            get
            {
                return this._start_time.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._start_time = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int end
        {
            get
            {
                return this._end;
            }
            set
            {
                this._end = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float end_time
        {
            get
            {
                return this._end_time;
            }
            set
            {
                this._end_time = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(chapterType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current chapterType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an chapterType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output chapterType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out chapterType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(chapterType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out chapterType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static chapterType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((chapterType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static chapterType Deserialize(System.IO.Stream s)
        {
            return ((chapterType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current chapterType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an chapterType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output chapterType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out chapterType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(chapterType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out chapterType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static chapterType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1085.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class programType
    {
        
        private List<tagType> _tag;
        
        private List<streamType> _streams;
        
        private int _program_id;
        
        private int _program_num;
        
        private int _nb_streams;
        
        private System.Nullable<float> _start_time;
        
        private System.Nullable<long> _start_pts;
        
        private System.Nullable<float> _end_time;
        
        private System.Nullable<long> _end_pts;
        
        private int _pmt_pid;
        
        private int _pcr_pid;
        
        private static XmlSerializer serializer;
        
        public programType()
        {
            this._streams = new List<streamType>();
            this._tag = new List<tagType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("tag", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<tagType> tag
        {
            get
            {
                return this._tag;
            }
            set
            {
                this._tag = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("stream", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public List<streamType> streams
        {
            get
            {
                return this._streams;
            }
            set
            {
                this._streams = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int program_id
        {
            get
            {
                return this._program_id;
            }
            set
            {
                this._program_id = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int program_num
        {
            get
            {
                return this._program_num;
            }
            set
            {
                this._program_num = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int nb_streams
        {
            get
            {
                return this._nb_streams;
            }
            set
            {
                this._nb_streams = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float start_time
        {
            get
            {
                if (this._start_time.HasValue)
                {
                    return this._start_time.Value;
                }
                else
                {
                    return default(float);
                }
            }
            set
            {
                this._start_time = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool start_timeSpecified
        {
            get
            {
                return this._start_time.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._start_time = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long start_pts
        {
            get
            {
                if (this._start_pts.HasValue)
                {
                    return this._start_pts.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                this._start_pts = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool start_ptsSpecified
        {
            get
            {
                return this._start_pts.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._start_pts = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float end_time
        {
            get
            {
                if (this._end_time.HasValue)
                {
                    return this._end_time.Value;
                }
                else
                {
                    return default(float);
                }
            }
            set
            {
                this._end_time = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool end_timeSpecified
        {
            get
            {
                return this._end_time.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._end_time = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long end_pts
        {
            get
            {
                if (this._end_pts.HasValue)
                {
                    return this._end_pts.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                this._end_pts = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool end_ptsSpecified
        {
            get
            {
                return this._end_pts.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._end_pts = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int pmt_pid
        {
            get
            {
                return this._pmt_pid;
            }
            set
            {
                this._pmt_pid = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int pcr_pid
        {
            get
            {
                return this._pcr_pid;
            }
            set
            {
                this._pcr_pid = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(programType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current programType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an programType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output programType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out programType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(programType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out programType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static programType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((programType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static programType Deserialize(System.IO.Stream s)
        {
            return ((programType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current programType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an programType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output programType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out programType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(programType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out programType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static programType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1085.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class streamType
    {
        
        private streamDispositionType _disposition;
        
        private List<tagType> _tag;
        
        private int _index;
        
        private string _codec_name;
        
        private string _codec_long_name;
        
        private string _profile;
        
        private string _codec_type;
        
        private string _codec_time_base;
        
        private string _codec_tag;
        
        private string _codec_tag_string;
        
        private string _extradata;
        
        private System.Nullable<int> _width;
        
        private System.Nullable<int> _height;
        
        private System.Nullable<int> _has_b_frames;
        
        private string _sample_aspect_ratio;
        
        private string _display_aspect_ratio;
        
        private string _pix_fmt;
        
        private System.Nullable<int> _level;
        
        private string _timecode;
        
        private string _sample_fmt;
        
        private System.Nullable<int> _sample_rate;
        
        private System.Nullable<int> _channels;
        
        private string _channel_layout;
        
        private System.Nullable<int> _bits_per_sample;
        
        private string _id;
        
        private string _r_frame_rate;
        
        private string _avg_frame_rate;
        
        private string _time_base;
        
        private System.Nullable<long> _start_pts;
        
        private System.Nullable<float> _start_time;
        
        private System.Nullable<long> _duration_ts;
        
        private System.Nullable<float> _duration;
        
        private System.Nullable<int> _bit_rate;
        
        private System.Nullable<int> _nb_frames;
        
        private System.Nullable<int> _nb_read_frames;
        
        private System.Nullable<int> _nb_read_packets;
        
        private static XmlSerializer serializer;
        
        public streamType()
        {
            this._tag = new List<tagType>();
            this._disposition = new streamDispositionType();
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public streamDispositionType disposition
        {
            get
            {
                return this._disposition;
            }
            set
            {
                this._disposition = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("tag", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<tagType> tag
        {
            get
            {
                return this._tag;
            }
            set
            {
                this._tag = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int index
        {
            get
            {
                return this._index;
            }
            set
            {
                this._index = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string codec_name
        {
            get
            {
                return this._codec_name;
            }
            set
            {
                this._codec_name = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string codec_long_name
        {
            get
            {
                return this._codec_long_name;
            }
            set
            {
                this._codec_long_name = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string profile
        {
            get
            {
                return this._profile;
            }
            set
            {
                this._profile = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string codec_type
        {
            get
            {
                return this._codec_type;
            }
            set
            {
                this._codec_type = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string codec_time_base
        {
            get
            {
                return this._codec_time_base;
            }
            set
            {
                this._codec_time_base = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string codec_tag
        {
            get
            {
                return this._codec_tag;
            }
            set
            {
                this._codec_tag = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string codec_tag_string
        {
            get
            {
                return this._codec_tag_string;
            }
            set
            {
                this._codec_tag_string = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string extradata
        {
            get
            {
                return this._extradata;
            }
            set
            {
                this._extradata = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int width
        {
            get
            {
                if (this._width.HasValue)
                {
                    return this._width.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                this._width = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool widthSpecified
        {
            get
            {
                return this._width.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._width = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int height
        {
            get
            {
                if (this._height.HasValue)
                {
                    return this._height.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                this._height = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool heightSpecified
        {
            get
            {
                return this._height.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._height = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int has_b_frames
        {
            get
            {
                if (this._has_b_frames.HasValue)
                {
                    return this._has_b_frames.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                this._has_b_frames = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool has_b_framesSpecified
        {
            get
            {
                return this._has_b_frames.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._has_b_frames = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string sample_aspect_ratio
        {
            get
            {
                return this._sample_aspect_ratio;
            }
            set
            {
                this._sample_aspect_ratio = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string display_aspect_ratio
        {
            get
            {
                return this._display_aspect_ratio;
            }
            set
            {
                this._display_aspect_ratio = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string pix_fmt
        {
            get
            {
                return this._pix_fmt;
            }
            set
            {
                this._pix_fmt = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int level
        {
            get
            {
                if (this._level.HasValue)
                {
                    return this._level.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                this._level = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool levelSpecified
        {
            get
            {
                return this._level.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._level = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string timecode
        {
            get
            {
                return this._timecode;
            }
            set
            {
                this._timecode = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string sample_fmt
        {
            get
            {
                return this._sample_fmt;
            }
            set
            {
                this._sample_fmt = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int sample_rate
        {
            get
            {
                if (this._sample_rate.HasValue)
                {
                    return this._sample_rate.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                this._sample_rate = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool sample_rateSpecified
        {
            get
            {
                return this._sample_rate.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._sample_rate = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int channels
        {
            get
            {
                if (this._channels.HasValue)
                {
                    return this._channels.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                this._channels = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool channelsSpecified
        {
            get
            {
                return this._channels.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._channels = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string channel_layout
        {
            get
            {
                return this._channel_layout;
            }
            set
            {
                this._channel_layout = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int bits_per_sample
        {
            get
            {
                if (this._bits_per_sample.HasValue)
                {
                    return this._bits_per_sample.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                this._bits_per_sample = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool bits_per_sampleSpecified
        {
            get
            {
                return this._bits_per_sample.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._bits_per_sample = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string r_frame_rate
        {
            get
            {
                return this._r_frame_rate;
            }
            set
            {
                this._r_frame_rate = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string avg_frame_rate
        {
            get
            {
                return this._avg_frame_rate;
            }
            set
            {
                this._avg_frame_rate = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string time_base
        {
            get
            {
                return this._time_base;
            }
            set
            {
                this._time_base = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long start_pts
        {
            get
            {
                if (this._start_pts.HasValue)
                {
                    return this._start_pts.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                this._start_pts = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool start_ptsSpecified
        {
            get
            {
                return this._start_pts.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._start_pts = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float start_time
        {
            get
            {
                if (this._start_time.HasValue)
                {
                    return this._start_time.Value;
                }
                else
                {
                    return default(float);
                }
            }
            set
            {
                this._start_time = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool start_timeSpecified
        {
            get
            {
                return this._start_time.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._start_time = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long duration_ts
        {
            get
            {
                if (this._duration_ts.HasValue)
                {
                    return this._duration_ts.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                this._duration_ts = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool duration_tsSpecified
        {
            get
            {
                return this._duration_ts.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._duration_ts = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float duration
        {
            get
            {
                if (this._duration.HasValue)
                {
                    return this._duration.Value;
                }
                else
                {
                    return default(float);
                }
            }
            set
            {
                this._duration = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool durationSpecified
        {
            get
            {
                return this._duration.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._duration = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int bit_rate
        {
            get
            {
                if (this._bit_rate.HasValue)
                {
                    return this._bit_rate.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                this._bit_rate = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool bit_rateSpecified
        {
            get
            {
                return this._bit_rate.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._bit_rate = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int nb_frames
        {
            get
            {
                if (this._nb_frames.HasValue)
                {
                    return this._nb_frames.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                this._nb_frames = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nb_framesSpecified
        {
            get
            {
                return this._nb_frames.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._nb_frames = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int nb_read_frames
        {
            get
            {
                if (this._nb_read_frames.HasValue)
                {
                    return this._nb_read_frames.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                this._nb_read_frames = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nb_read_framesSpecified
        {
            get
            {
                return this._nb_read_frames.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._nb_read_frames = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int nb_read_packets
        {
            get
            {
                if (this._nb_read_packets.HasValue)
                {
                    return this._nb_read_packets.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                this._nb_read_packets = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nb_read_packetsSpecified
        {
            get
            {
                return this._nb_read_packets.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._nb_read_packets = null;
                }
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(streamType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current streamType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an streamType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output streamType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out streamType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(streamType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out streamType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static streamType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((streamType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static streamType Deserialize(System.IO.Stream s)
        {
            return ((streamType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current streamType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an streamType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output streamType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out streamType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(streamType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out streamType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static streamType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1085.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class streamDispositionType
    {
        
        private int _default;
        
        private int _dub;
        
        private int _original;
        
        private int _comment;
        
        private int _lyrics;
        
        private int _karaoke;
        
        private int _forced;
        
        private int _hearing_impaired;
        
        private int _visual_impaired;
        
        private int _clean_effects;
        
        private int _attached_pic;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int @default
        {
            get
            {
                return this._default;
            }
            set
            {
                this._default = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int dub
        {
            get
            {
                return this._dub;
            }
            set
            {
                this._dub = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int original
        {
            get
            {
                return this._original;
            }
            set
            {
                this._original = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int comment
        {
            get
            {
                return this._comment;
            }
            set
            {
                this._comment = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int lyrics
        {
            get
            {
                return this._lyrics;
            }
            set
            {
                this._lyrics = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int karaoke
        {
            get
            {
                return this._karaoke;
            }
            set
            {
                this._karaoke = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int forced
        {
            get
            {
                return this._forced;
            }
            set
            {
                this._forced = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int hearing_impaired
        {
            get
            {
                return this._hearing_impaired;
            }
            set
            {
                this._hearing_impaired = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int visual_impaired
        {
            get
            {
                return this._visual_impaired;
            }
            set
            {
                this._visual_impaired = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int clean_effects
        {
            get
            {
                return this._clean_effects;
            }
            set
            {
                this._clean_effects = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int attached_pic
        {
            get
            {
                return this._attached_pic;
            }
            set
            {
                this._attached_pic = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(streamDispositionType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current streamDispositionType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an streamDispositionType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output streamDispositionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out streamDispositionType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(streamDispositionType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out streamDispositionType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static streamDispositionType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((streamDispositionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static streamDispositionType Deserialize(System.IO.Stream s)
        {
            return ((streamDispositionType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current streamDispositionType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an streamDispositionType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output streamDispositionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out streamDispositionType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(streamDispositionType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out streamDispositionType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static streamDispositionType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1085.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class subtitleType
    {
        
        private string _media_type;
        
        private System.Nullable<long> _pts;
        
        private System.Nullable<float> _pts_time;
        
        private System.Nullable<int> _format;
        
        private System.Nullable<int> _start_display_time;
        
        private System.Nullable<int> _end_display_time;
        
        private System.Nullable<int> _num_rects;
        
        private static XmlSerializer serializer;
        
        public subtitleType()
        {
            this._media_type = "subtitle";
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string media_type
        {
            get
            {
                return this._media_type;
            }
            set
            {
                this._media_type = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long pts
        {
            get
            {
                if (this._pts.HasValue)
                {
                    return this._pts.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                this._pts = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ptsSpecified
        {
            get
            {
                return this._pts.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._pts = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float pts_time
        {
            get
            {
                if (this._pts_time.HasValue)
                {
                    return this._pts_time.Value;
                }
                else
                {
                    return default(float);
                }
            }
            set
            {
                this._pts_time = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pts_timeSpecified
        {
            get
            {
                return this._pts_time.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._pts_time = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int format
        {
            get
            {
                if (this._format.HasValue)
                {
                    return this._format.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                this._format = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool formatSpecified
        {
            get
            {
                return this._format.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._format = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int start_display_time
        {
            get
            {
                if (this._start_display_time.HasValue)
                {
                    return this._start_display_time.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                this._start_display_time = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool start_display_timeSpecified
        {
            get
            {
                return this._start_display_time.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._start_display_time = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int end_display_time
        {
            get
            {
                if (this._end_display_time.HasValue)
                {
                    return this._end_display_time.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                this._end_display_time = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool end_display_timeSpecified
        {
            get
            {
                return this._end_display_time.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._end_display_time = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int num_rects
        {
            get
            {
                if (this._num_rects.HasValue)
                {
                    return this._num_rects.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                this._num_rects = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool num_rectsSpecified
        {
            get
            {
                return this._num_rects.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._num_rects = null;
                }
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(subtitleType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current subtitleType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an subtitleType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output subtitleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out subtitleType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(subtitleType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out subtitleType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static subtitleType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((subtitleType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static subtitleType Deserialize(System.IO.Stream s)
        {
            return ((subtitleType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current subtitleType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an subtitleType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output subtitleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out subtitleType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(subtitleType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out subtitleType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static subtitleType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1085.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class frameType
    {
        
        private string _media_type;
        
        private int _key_frame;
        
        private System.Nullable<long> _pts;
        
        private System.Nullable<float> _pts_time;
        
        private System.Nullable<long> _pkt_pts;
        
        private System.Nullable<float> _pkt_pts_time;
        
        private System.Nullable<long> _pkt_dts;
        
        private System.Nullable<float> _pkt_dts_time;
        
        private System.Nullable<long> _pkt_duration;
        
        private System.Nullable<float> _pkt_duration_time;
        
        private System.Nullable<long> _pkt_pos;
        
        private System.Nullable<int> _pkt_size;
        
        private string _sample_fmt;
        
        private System.Nullable<long> _nb_samples;
        
        private System.Nullable<int> _channels;
        
        private string _channel_layout;
        
        private System.Nullable<long> _width;
        
        private System.Nullable<long> _height;
        
        private string _pix_fmt;
        
        private string _sample_aspect_ratio;
        
        private string _pict_type;
        
        private System.Nullable<long> _coded_picture_number;
        
        private System.Nullable<long> _display_picture_number;
        
        private System.Nullable<int> _interlaced_frame;
        
        private System.Nullable<int> _top_field_first;
        
        private System.Nullable<int> _repeat_pict;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string media_type
        {
            get
            {
                return this._media_type;
            }
            set
            {
                this._media_type = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int key_frame
        {
            get
            {
                return this._key_frame;
            }
            set
            {
                this._key_frame = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long pts
        {
            get
            {
                if (this._pts.HasValue)
                {
                    return this._pts.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                this._pts = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ptsSpecified
        {
            get
            {
                return this._pts.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._pts = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float pts_time
        {
            get
            {
                if (this._pts_time.HasValue)
                {
                    return this._pts_time.Value;
                }
                else
                {
                    return default(float);
                }
            }
            set
            {
                this._pts_time = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pts_timeSpecified
        {
            get
            {
                return this._pts_time.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._pts_time = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long pkt_pts
        {
            get
            {
                if (this._pkt_pts.HasValue)
                {
                    return this._pkt_pts.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                this._pkt_pts = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pkt_ptsSpecified
        {
            get
            {
                return this._pkt_pts.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._pkt_pts = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float pkt_pts_time
        {
            get
            {
                if (this._pkt_pts_time.HasValue)
                {
                    return this._pkt_pts_time.Value;
                }
                else
                {
                    return default(float);
                }
            }
            set
            {
                this._pkt_pts_time = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pkt_pts_timeSpecified
        {
            get
            {
                return this._pkt_pts_time.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._pkt_pts_time = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long pkt_dts
        {
            get
            {
                if (this._pkt_dts.HasValue)
                {
                    return this._pkt_dts.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                this._pkt_dts = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pkt_dtsSpecified
        {
            get
            {
                return this._pkt_dts.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._pkt_dts = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float pkt_dts_time
        {
            get
            {
                if (this._pkt_dts_time.HasValue)
                {
                    return this._pkt_dts_time.Value;
                }
                else
                {
                    return default(float);
                }
            }
            set
            {
                this._pkt_dts_time = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pkt_dts_timeSpecified
        {
            get
            {
                return this._pkt_dts_time.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._pkt_dts_time = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long pkt_duration
        {
            get
            {
                if (this._pkt_duration.HasValue)
                {
                    return this._pkt_duration.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                this._pkt_duration = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pkt_durationSpecified
        {
            get
            {
                return this._pkt_duration.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._pkt_duration = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float pkt_duration_time
        {
            get
            {
                if (this._pkt_duration_time.HasValue)
                {
                    return this._pkt_duration_time.Value;
                }
                else
                {
                    return default(float);
                }
            }
            set
            {
                this._pkt_duration_time = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pkt_duration_timeSpecified
        {
            get
            {
                return this._pkt_duration_time.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._pkt_duration_time = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long pkt_pos
        {
            get
            {
                if (this._pkt_pos.HasValue)
                {
                    return this._pkt_pos.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                this._pkt_pos = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pkt_posSpecified
        {
            get
            {
                return this._pkt_pos.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._pkt_pos = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int pkt_size
        {
            get
            {
                if (this._pkt_size.HasValue)
                {
                    return this._pkt_size.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                this._pkt_size = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pkt_sizeSpecified
        {
            get
            {
                return this._pkt_size.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._pkt_size = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string sample_fmt
        {
            get
            {
                return this._sample_fmt;
            }
            set
            {
                this._sample_fmt = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long nb_samples
        {
            get
            {
                if (this._nb_samples.HasValue)
                {
                    return this._nb_samples.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                this._nb_samples = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nb_samplesSpecified
        {
            get
            {
                return this._nb_samples.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._nb_samples = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int channels
        {
            get
            {
                if (this._channels.HasValue)
                {
                    return this._channels.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                this._channels = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool channelsSpecified
        {
            get
            {
                return this._channels.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._channels = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string channel_layout
        {
            get
            {
                return this._channel_layout;
            }
            set
            {
                this._channel_layout = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long width
        {
            get
            {
                if (this._width.HasValue)
                {
                    return this._width.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                this._width = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool widthSpecified
        {
            get
            {
                return this._width.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._width = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long height
        {
            get
            {
                if (this._height.HasValue)
                {
                    return this._height.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                this._height = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool heightSpecified
        {
            get
            {
                return this._height.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._height = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string pix_fmt
        {
            get
            {
                return this._pix_fmt;
            }
            set
            {
                this._pix_fmt = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string sample_aspect_ratio
        {
            get
            {
                return this._sample_aspect_ratio;
            }
            set
            {
                this._sample_aspect_ratio = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string pict_type
        {
            get
            {
                return this._pict_type;
            }
            set
            {
                this._pict_type = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long coded_picture_number
        {
            get
            {
                if (this._coded_picture_number.HasValue)
                {
                    return this._coded_picture_number.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                this._coded_picture_number = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool coded_picture_numberSpecified
        {
            get
            {
                return this._coded_picture_number.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._coded_picture_number = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long display_picture_number
        {
            get
            {
                if (this._display_picture_number.HasValue)
                {
                    return this._display_picture_number.Value;
                }
                else
                {
                    return default(long);
                }
            }
            set
            {
                this._display_picture_number = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool display_picture_numberSpecified
        {
            get
            {
                return this._display_picture_number.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._display_picture_number = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int interlaced_frame
        {
            get
            {
                if (this._interlaced_frame.HasValue)
                {
                    return this._interlaced_frame.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                this._interlaced_frame = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool interlaced_frameSpecified
        {
            get
            {
                return this._interlaced_frame.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._interlaced_frame = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int top_field_first
        {
            get
            {
                if (this._top_field_first.HasValue)
                {
                    return this._top_field_first.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                this._top_field_first = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool top_field_firstSpecified
        {
            get
            {
                return this._top_field_first.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._top_field_first = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int repeat_pict
        {
            get
            {
                if (this._repeat_pict.HasValue)
                {
                    return this._repeat_pict.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                this._repeat_pict = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool repeat_pictSpecified
        {
            get
            {
                return this._repeat_pict.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._repeat_pict = null;
                }
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(frameType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current frameType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an frameType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output frameType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out frameType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(frameType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out frameType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static frameType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((frameType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static frameType Deserialize(System.IO.Stream s)
        {
            return ((frameType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current frameType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an frameType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output frameType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out frameType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(frameType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out frameType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static frameType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1085.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class framesType
    {
        
        private List<object> _items;
        
        private static XmlSerializer serializer;
        
        public framesType()
        {
            this._items = new List<object>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("frame", typeof(frameType), Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlElementAttribute("subtitle", typeof(subtitleType), Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<object> Items
        {
            get
            {
                return this._items;
            }
            set
            {
                this._items = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(framesType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current framesType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an framesType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output framesType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out framesType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(framesType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out framesType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static framesType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((framesType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static framesType Deserialize(System.IO.Stream s)
        {
            return ((framesType)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current framesType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an framesType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output framesType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out framesType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(framesType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out framesType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static framesType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
}
#pragma warning restore
