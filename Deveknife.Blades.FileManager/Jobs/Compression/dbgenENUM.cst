<%-- 
Name: Table Data Enumeration
Description: Create an enum of data rows from a tables.  
Adapted from a template inside the .netTiers Template Framework.
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Debug="false" Description="Create an enum of table data." %>
<%@ Property Category="01. Choose Table For Enum" Name="SourceTable" Type="SchemaExplorer.TableSchema" Optional="False" Description="Table whose data will be used for the enum." %>
<%@ Property Category="02. Enum Name String Format" Name="EnumFormat" Type="System.String" Optional="True" Default="{0}" Description="Formatter which will be applied to the name of the enum when binding the table name." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>



<%@ CodeTemplate Src=".\CustomCollectionfromDB.cst.cs" Inherits="CustomCollectionfromDBTemplate" Language="C#" 
TargetLanguage="C#" %>

	using System;

	/// <summary>
	/// <%= GetTableDescription(SourceTable) %>
	/// </summary>
	[Serializable]
	public class <%= string.Format(EnumFormat, StringUtil.ToPascalCase(SourceTable.Name)) %>
	{
	<%
			//Debugger.Break();
		DataTable data = SourceTable.GetTableData();
		for(int i=0; i<data.Rows.Count; i++)
		{
			DataRow row = data.Rows[i];
			string enumValue = CleanValue(row[1] as string);
			
			
		for(int k=0; k<data.Columns.Count; k++)
		{
			Response.Write("\t\t/// {2}->{0}{1}", row[k], Environment.NewLine,data.Columns[k].ColumnName.ToString());
		}
			if (data.Columns.Count > 2)
			{
				Response.Write("\t\t/// <summary> {0}", Environment.NewLine);
				Response.Write("\t\t/// {0}{1}", row[2], Environment.NewLine);
				Response.Write("\t\t/// </summary>{0}", Environment.NewLine);
			}
			else
			{
				Response.Write("\t\t/// <summary> {0}", Environment.NewLine);
				Response.Write("\t\t/// {0}{1}", enumValue, Environment.NewLine);
				Response.Write("\t\t/// </summary>{0}", Environment.NewLine);
			}
			
			Response.Write("\t\tpublic const string {0} = \"{1}\"{2}{3}{3}", enumValue, row[0], i<data.Rows.Count-1 ? "; " : string.Empty, Environment.NewLine);
		}%>	
	}

<script runat="template">
	private readonly static DbType[] aIntegerDbTypes = new DbType[] {DbType.Byte, DbType.Int16, DbType.Int32, DbType.Int64 };
	
	/// <summary>
	/// Check a table for enum eligibility
	/// </summary>
	/// <param name="table">the table instance to check.</param>
	/// <exception name="ApplicationException"/>
	private void ValidForEnum(TableSchema table)
	{
		#region Primary key validation
		
		// No primary key
		if (!table.HasPrimaryKey)
		{
			throw new ApplicationException("The selected table has no primary key.");
		}
		
		// Multiple column in primary key
		if (table.PrimaryKey.MemberColumns.Count != 1)
		{
			throw new ApplicationException("table primary key contains more than one column.");
		}
		
		// Primary key column is not an integer
		if (!IsInteger(table.PrimaryKey.MemberColumns[0]))
		{
			throw new ApplicationException("table primary key column is not an integer. (used for enum value)");
		}
		
		#endregion
		
		#region Second column must be a string
		
		// The table must have 2 columns at least
		if (table.Columns.Count < 2)
		{
			throw new ApplicationException("Table must at least contains two columns, an integer or small int as the primary key, and a string.");
		}
		
		// The second column must be a string (char, varchar) 
		if (table.Columns[1].SystemType != typeof(string))
		{
			throw new ApplicationException("Invalid format for Enum, 2nd column must be a string.");
		}									
		#endregion
	}
	
	/// <summary>
	///	Indicates if a column is a Number type.
	/// </summary>
	private bool IsInteger(ColumnSchema column)
	{
		bool result = false;

		for(int i = 0; i < aIntegerDbTypes.Length; i++)
		{
			if (aIntegerDbTypes[i] == column.DataType) 
			{
				if (column.DataType == DbType.Byte 
					&& column.NativeType.ToLower() != "smallint")
					continue;
				
				result=true;
			}
		}
		
		return result;	
	}
	
	///<summary>
	///  Clean the string of the row.
	///</summary>
	public string CleanValue(string val)
	{
		if (string.IsNullOrEmpty(val))
			return "NullOption";
			
		//Initial Formatting - trim whitespace
		val = val.Trim();

		//Replace non-word characters
		val = Regex.Replace(val,@"[\W]", "_");
		
		//Replace duplicate _ with a single instance
		val = Regex.Replace(val,@"_+","_");
		
		//Remove digit characters from start
		val = Regex.Replace(val,@"^[0-9]+","");
		
		//Strip any leading and trailing underscores
		val = val.TrimStart(new char[] {'_'}).TrimEnd(new char[] {'_'});
		
		//If completely numeric value, prefix with Option_
		if ( Regex.IsMatch(val,@"^[0-9]+$"))
			val = "Option_" + val;
				
		return val;
	}
	
	public string GetTableDescription(TableSchema table)
	{
		if (!string.IsNullOrEmpty(table.Description))
			return table.Description;
		else
			return string.Concat("This enumeration contains the items contained in the table " , SourceTable.Name);
	}
</script>